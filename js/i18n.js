// i18n.js - –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
class I18n {
    constructor() {
        this.currentLang = 'en';
        this.translations = {};
        this.defaultLang = 'en';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    async init() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ URL –∏–ª–∏ localStorage
        this.currentLang = this.detectLanguage();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        await this.loadTranslations();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        this.updateContent();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        console.log(`üåç I18n initialized with language: ${this.currentLang}`);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    detectLanguage() {
        // 1. –ò–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?lang=ru
        const urlParams = new URLSearchParams(window.location.search);
        const urlLang = urlParams.get('lang');
        if (urlLang && ['en', 'ru', 'it'].includes(urlLang)) {
            localStorage.setItem('preferredLanguage', urlLang);
            return urlLang;
        }
        
        // 2. –ò–∑ localStorage
        const savedLang = localStorage.getItem('preferredLanguage');
        if (savedLang && ['en', 'ru', 'it'].includes(savedLang)) {
            return savedLang;
        }
        
        // 3. –ò–∑ –±—Ä–∞—É–∑–µ—Ä–∞
        const browserLang = navigator.language.split('-')[0];
        if (['en', 'ru', 'it'].includes(browserLang)) {
            return browserLang;
        }
        
        // 4. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return this.defaultLang;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    async loadTranslations() {
        const languages = ['en', 'ru', 'it'];
        
        for (const lang of languages) {
            try {
                const response = await fetch(`translations/${lang}.json`);
                if (response.ok) {
                    this.translations[lang] = await response.json();
                } else {
                    console.warn(`Failed to load translations for ${lang}`);
                }
            } catch (error) {
                console.error(`Error loading translations for ${lang}:`, error);
                
                // Fallback - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
                if (lang === 'en') {
                    this.translations[lang] = this.getDefaultTranslations();
                }
            }
        }
    }

    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞–∫ fallback
    getDefaultTranslations() {
        return {
            "menu": {
                "language": "Language",
                "contact": "Contact me",
                "review": "Review",
                "download": "Download"
            },
            "hero": {
                "title": "Fast. Easy. Free",
                "description": "Create hundreds of standard documents with a few keystrokes. Let machines do the routine work for you.",
                "download": "Download"
            },
            "about": {
                "header": "About Template Master",
                "1st": "Imagine that you need to type the text for dozens of greeting cards, changing only the names and addresses. Or maybe you are sending out wedding invitations? Or you need to send a multi-page legal document to hundreds of recipients, making dozens of edits in each copy. Boring routine work. This is exactly what machines are for.",
                "2nd": "With the Template Master application, you only need a document template and a spreadsheet with data for replacements. You can read how to create a template in the instructions by clicking the corresponding button in the program. The program can generate the header for the spreadsheet itself, you will only have to enter the data.",
                "3rd": "If you need to generate one document, and you have a template, the program can do this too. Currently, Template Master can work with DOCX and ODT documents, as well as XLSX and ODS spreadsheets. And, it is also a completely free application."
            },
            "screenshots": {
                "header": "See Template Master in Action",
                "main": "Main interface - simple and intuitive"
            }
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É
    getTranslation(key, lang = null) {
        const targetLang = lang || this.currentLang;
        const translations = this.translations[targetLang] || this.translations[this.defaultLang];
        
        if (!translations) return key;
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: "menu.language"
        const keys = key.split('.');
        let result = translations;
        
        for (const k of keys) {
            if (result && typeof result === 'object' && k in result) {
                result = result[k];
            } else {
                return key; // –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
        }
        
        return result || key;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    updateContent() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.dataset.i18n;
            const translation = this.getTranslation(key);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (element.tagName === 'INPUT' && element.type === 'submit') {
                element.value = translation;
            } else if (element.tagName === 'INPUT' && element.hasAttribute('placeholder')) {
                element.placeholder = translation;
            } else {
                element.textContent = translation;
            }
        });

        document.querySelectorAll('.footer--privacy').forEach(link => {
            link.href = `privacy-${this.currentLang}.html`;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        document.querySelectorAll('[data-i18n-src]').forEach(img => {
            const key = img.dataset.i18nSrc;
            const imagePath = this.getTranslation(key);
            if (imagePath && imagePath !== key) {
                img.src = imagePath;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã alt –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        document.querySelectorAll('[data-i18n-alt]').forEach(img => {
            const key = img.dataset.i18nAlt;
            const altText = this.getTranslation(key);
            if (altText && altText !== key) {
                img.alt = altText;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫ –≤ –º–µ–Ω—é
        this.updateLanguageMenu();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç lang —É html
        document.documentElement.lang = this.currentLang;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —è–∑—ã–∫–æ–≤
    updateLanguageMenu() {
        const langLinks = document.querySelectorAll('[data-lang]');
        const currentLangText = document.querySelector('[data-i18n="menu.language"]');
        
        // –£–±–∏—Ä–∞–µ–º active –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö
        langLinks.forEach(link => link.classList.remove('active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º active –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        const currentLink = document.querySelector(`[data-lang="${this.currentLang}"]`);
        if (currentLink) {
            currentLink.classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ dropdown –∫–Ω–æ–ø–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if (currentLangText && currentLangText.tagName === 'A') {
                const langNames = {
                    'en': 'English',
                    'ru': '–†—É—Å—Å–∫–∏–π',
                    'it': 'Italiano'
                };
                // currentLangText.textContent = langNames[this.currentLang];
            }
        }
    }

    // –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
    async changeLanguage(newLang) {
        if (!['en', 'ru', 'it'].includes(newLang) || newLang === this.currentLang) {
            return;
        }

        console.log(`üîÑ Changing language from ${this.currentLang} to ${newLang}`);
        
        this.currentLang = newLang;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('preferredLanguage', newLang);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        const url = new URL(window.location);
        url.searchParams.set('lang', newLang);
        window.history.replaceState({}, '', url);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        this.updateContent();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        document.dispatchEvent(new CustomEvent('languageChanged', { 
            detail: { 
                oldLang: this.currentLang, 
                newLang: newLang 
            } 
        }));
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-lang]')) {
                e.preventDefault();
                const newLang = e.target.dataset.lang;
                this.changeLanguage(newLang);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π URL (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –≤—Ä—É—á–Ω—É—é)
        window.addEventListener('popstate', () => {
            const urlLang = new URLSearchParams(window.location.search).get('lang');
            if (urlLang && urlLang !== this.currentLang) {
                this.changeLanguage(urlLang);
            }
        });
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    getCurrentLanguage() {
        return this.currentLang;
    }

    getSupportedLanguages() {
        return ['en', 'ru', 'it'];
    }

    // –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ JS –∫–æ–¥–µ
    t(key, params = {}) {
        let translation = this.getTranslation(key);
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: "Hello {name}" + {name: "John"} = "Hello John"
        Object.keys(params).forEach(param => {
            translation = translation.replace(`{${param}}`, params[param]);
        });
        
        return translation;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let i18n;

document.addEventListener('DOMContentLoaded', async () => {
    i18n = new I18n();
    
    // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.i18n = i18n;
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = I18n;
}